<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[每个人都应该学习一门编程语言]]></title>
      <url>http://thinkingroom.me/2016/10/25/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E5%BA%94%E8%AF%A5%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</url>
      <content type="text"><![CDATA[关键词：编程入门，编程语言基本要素 在纪录片《乔布斯：遗失的访谈》中，乔布斯谈到他20岁左右学习编程的经历： 当时编程可以帮助我们完成工作，但没有明确的实用性，重要的是我们把它看作思考的镜子，学习如何思考。 我觉得每个人都应该学习一门编程语言。学习编程教你如何思考，就像学法律一样。学法律并不一定要为了做律师，但法律教你一种思考方式。学习编程也是一样，我把计算机科学看成是基础教育，每个人都应该花一年时间学习编程。 每个人都应该去学习一门编程语言，但不是让你成为程序员，而是它可以使你换一种方式思考问题，或许对你要做的事情或遇到的问题有所帮助。 先来看个例子，在李笑来老师的《把时间当作朋友》第一章的第三小节有讲到他那本帮他实现财务自由的畅销书《TOEFL核心词汇21天突破》是如何写出来的。 当年我在少年宫学习计算机程序语言的时候，怎么可能想象得到，在20多年后的某一天，我需要先用软件调取语料库中的数据，然后用统计方法为每个单词标注词频，再写一个批处理程序从相应的字典里复制出多达20MB的内容，重新整理…… 《TOEFL核心词汇21天》这本书是包含了TOEFL考试常考2140个词汇，而词条内容由音标、释义、例句、衍生词、同义词五个基本单位构成，例句全部来自真实文章，其他内容的来自《美国传统辞典》。 李笑来老师为这本书编写的批处理程序，可以简化理解为解决下面几个问题：1.如何统计过往TOEFL历年真题文章中单词词频。2.如何给统计的单词排序。3.如何提取字典里对应单词的音标、释义、衍生词、同义词。4.如何按单词提取真题文章所在的句子。 如果让你来解决李笑来老师例子的第一个的问题（统计单词的词频），怎么来用文字语言来描述你的想法，手工实现步骤要做哪些事情，读者先自己思考一下，后面笔者给出自己的思路和实现。 如何解决上面提到的问题，如果纯人工统计和整理是件繁琐耗时间的事情，李笑来老师也表示 在编写《TOEFL核心词汇21天突破》的过程中，倘若我没有稍多于常人的那点计算机知识，能自己编写一些批处理脚本，就不可能在那么短的时间里完成那样海量的工作。而且，如果没有这些技能，就算再花几倍的时间，也很难拿出具有与《TOEFL核心词汇21天突破》同样的质量的作品。而最终，质量保证了销量。 编程语言就是为此而生的,它可以简化很多重复繁琐的事情。 现在的编程语言种类繁多，每个语言都有其各自的特点，就像学习书法里有很多种字体，初学者可以根据自己的喜好来选择一门编程语言，无论学习哪种语言，一个强有力的语言都要提供下面三种机制，使我们能够在其中组织自己有关计算过程的思想： 基本表达形式，用于表示语言关心的最简单的个体。 组合的方法，通过它们可以从简单的东西出发构造出复合的元素。 抽象的方法，通过它们可以为复合对象命名，并将它们当作单元去操作。 可能开始有点难理解上面这段话，就拿衍纸来类比：1.基本表达形式，由不同颜色的纸带组成的，最简单的个体。2.组合的方法，通过简单的个体随意地制作出你自己设计的图案。3.抽象的方法，把制作出的图案作为单元，去拼凑更加复杂的图案。 初学者可以创造出简单的作品，同样的素材，造诣深的艺术家却可以创造精妙绝伦的作品。又例如古老的围棋游戏，虽然只有黑白两种棋子，通过简单的规则，初学者下得棋局比较简单，围棋大师却可以下出千万种复杂多变的高深棋局。同样编程语言，由不多的关键字和规则构成，却可以构造出千变万化的程序，这也是编程美妙和吸引我的地方。 现实世界的要解决的问题，到实际编程中，可以转换为处理两类要素：数据和过程。非形式的说，数据是一种我们希望操作的“东西”，而过程就是有关操作这些数据的规则的描述。这样，任何强有力的程序设计语言都必须能够表述基本的数据和基本的过程，还需要提供对过程和数据进行组合和抽象的的方法。 一般编程语言会提供以下基本知识要点：1.数据类型和变量2.运算符和表达式3.控制流(条件判断和循环)4.函数要点1归类到数据，要点2-4归类到过程里。 上面的知识要点可能初学者在学习时候会觉得有点抽象难理解，你试着带着疑问来思考为什么要有这些要点，这样会容易理解些。 为什么要有数据类型，计算机是不知道现实世界中各种各样的事物，你必须得要告诉它，简单的如整型，浮点，字符串等，复杂的如声音、图片、文件等，这样和现实中对应要解决问题的个体的类型形成一个对应关系。如统计词频问题，会用到整型，字符串，文件等数据类型。 为什么要有控制流, 现实生活中，总要做各种选择，编程语言对应的就是条件判断，如判断单词是否相等。我们要重复做某件事情，编程语言对应的就是循环，如统计词频问题里，要逐个阅读文章每个单词，判断前面是否出现过，并记录下来。 这样就不难理解编程语言为什么要提供这些东西，如果每块扩展开来讲解，差不多是半本书的内容，读者可以根据自己想学的语言来学习每个知识要点的内容。 最后，笔者给出前面提到的统计真题文章中单词的出现频率的大致流程：1.读入一篇真题文章2.逐个提取单词 2.1判断单词前面是否出现过，如果出现过，则记录单词次数累加1，否则记录单词为第一次出现3.遍历输出结果 python代码简单实现，忽略了一些特殊情况处理：123456789101112131415#统计一篇英文文章各个单词出现的词频的函数def wordcouter(path): result = &#123;&#125; #单词词频字典，记录单词次数 file_obj = open(file) #打开真题文件 all_the_text = file_obj.read() #读取文件内容 for word in all_the_text.split(): #逐个提取all_text文章里的单词word if word not in result: #如果word不在词频字典result, 即第一次出现 result[word] = 1 else: #否则前面出现过，则次数累加1 result[word] += 1 #循环遍历词频字典，输出单词出现次数 for key,value in result.items(): print key + ":%d" % value 如果你也在为英语考试备考中，例如高考英语、四六级、研究生、雅思等，通过掌握一门编程语言，试着解决上面提到的几个问题，或许你可以为自己创作一个《XXX核心词汇21天》。 附：名人谈编程视频]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[界面开发的三层境界]]></title>
      <url>http://thinkingroom.me/2016/10/25/%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%89%E5%B1%82%E5%A2%83%E7%95%8C/</url>
      <content type="text"><![CDATA[关键词：GUI框架，UI编辑器，界面引擎，MVC 第一层境界：代码写死笔者大学时候开始学习的语言是C/C++,学习完基本的概念后，后面想开发有界面的应用程序接触的是win32，你会发现创建一个窗口或者一个button控件要写好多代码，例如配置标题，位置，大小，背景颜色，icon等等各种属性，api接口一大堆参数。 win32创建窗口api HWND CreateWindow( LPCTSTR lpClassName, //窗口类型名称 LPCTSTR lpWindowName, //窗口名称 DWORD dwStyle, //窗口类型 int x, //窗口的左上角X坐边 int y, //窗口的左上角X坐边 int nWidth, //窗口的宽度 int nHeight, //窗口的高度 HWND hWndParent, //父窗口句柄 HMENU hMenu, //窗口菜单句柄 HANDLE hInstance, //应用程序的实例句柄 LPVOID lpParam //创建的参数，一般为NULL); 创建一个窗口的伪代码 HWND hWnd = CreateWindow( lpClassName, &quot;我是个窗口&quot;, WS_OVERLAPPEDWINDOW, 0, 0, 500, 300, NULL,NULL, hInstance, NULL ); 创建一个按钮的伪代码 HWND hButton = CreateWindow(L&quot;Button&quot;, L&quot;我是个按钮！&quot;, WS_VISIBLE | WS_CHILD | BS_PUSHBUTTON, 35, 45, 160, 65, hwnd, NULL, hg_app, NULL); 在这个阶段你会发现开发的界面不但巨丑，而且好像有看不完的api和各种奇怪的参数，生怕设置错了参数导致程序崩溃。例如最简单的要改变一个按钮或者图片显示的位置，你要不断的设置位置坐标直到满意为止，改变一次就要重新编译一次运行看看，这个过程非常繁琐耗时。 第二层境界：自动生成代码用第一阶段的方式来开发复杂些的应用界面，你会发现效率很低。因为当你在创建控件，写好那些配置参数的那一刻就把代码写死了，后面要重新调整界面或者大改界面时候，很多代码要重新写过。如果代码是自己写的还好，如果接手项目的新同事要读懂到修改则是个痛苦的过程。工作后才发现有一种叫ui编辑器的东西，有点规模的公司一般都会有自己开发的ui编辑器，由1-2个人来开发维护。ui编辑器就是个界面的配置系统，大多数都使用结构化的配置文件来保存界面配置信息，如xml格式。像andorid，ios原生开发环境自带的界面开发都有ui编辑器，qt，unity3d，cocos2d-x这些都也有。 例如qt的界面ui编辑器 显示界面，只要ui解析器加载一个xml配置文件就可以，不需要写一堆配置控件属性的代码，ui解析器会根据xml配置文件自动生成类似第一层境界的代码，类似伪代码如下： ui_parser.load(&quot;xxx_view.xml&quot;) 在这个阶段你会发现客户端ui界面开发瞬间变得轻松很多，界面的控件和参数在ui编辑器里配置好，程序里加载一下ui的配置文件，甚至一行代码都不用写，界面就出来了。如果boss不满意界面，使用ui编辑器修改轻松很多，不需要改很多代码。细心的读者会发现，这不就是MVC三层模式里的界面View和逻辑代码（Model，Controller）分离的过程吗。是的，界面的显示和逻辑代码不再耦合在一起了，这样我们会更加专注于写逻辑代码。 在第二层境界，大部分有经验的程序猿可以相对轻松的开发界面了。但是真正商业级的产品会给你提无数乱七八糟的需求，而这变化的需求不是一个通用控件可以搞定的，你会发现用xml配置那些写好的控件，到底还是太麻烦或满足不了你的需求。例如策划想游戏里面活动相关的按钮周围有酷炫的动画显示或者粒子效果，吸引玩家的注意力，或者这个按钮有可以按照某个轨迹移动的属性等等。 这时候，你可能会为了快速完成工作任务，新建一个XXX_Button类，继承原有的button基类或者直接修改button控件基类，添加新的动画属性、粒子效果属性，移动属性，然后ui编辑器添加相应配置的属性。下次有新的需求，再类似这样修改。如果不只是button控件要添加这些属性，策划还想下拉框、单选框、列表、文本等控件，也有各种需求，原有的控件不能满足，而有些控件添加相同的属性，这时候该怎么办呢？ 如果你使用的这个ui编辑器和ui解析器不是开源的，例如android，ios原生开发工具，qt designer等，当原有的控件不能再满足策划的需求，通过继承原有控件基类或自己重新自定义新的控件类型方式开发，这时候闭源的ui编辑器不能自适应新的控件类型，你又会倒退回第一层境界的方式来开发gui，开发效率又变低了。 第三层境界：抽象的层次和组合在第二层境界，笔者也想了好久，怎样的ui框架或者ui编辑器可以适应各种需求变化，更方便开发，参考了其他各种ui框架和ui编辑器。 最终发现，当你的思维观念中还执着于传统的ui控件体系，还执着于ui框架和ui编辑器的时候，很难再往上提高，需要有勇气去打破原有的思维观念，这对其他编程概念也是一样。 后来笔者在迅雷bolt的界面引擎和html+css+js找到新的思路，不是一上来就用传统的控件体系开发界面，而是把控件共同的属性抽象成更小粒度的元素，比控件层更高一层次抽象，例如迅雷的各种原子控件或者html里各种的基础元素，通过不能再拆分最小元素自由组合拼装成更适合你的控件。你会发现web前端总是不断有各种酷炫新的ui框架出来，开发界面速度比客户端用原生的开发工具要快， 是因为这种模式更容易定制你想要的ui控件。慢慢你开始定制自己的UI框架，而不是使用别人开发的。再配合脚本语言(如js，lua)的粘合，ui编辑器里也可以轻易编写控件的交互逻辑，不单单只是配置控件属性。 如qt里的qml语法格式非常像CSS，但又支持javascript形式的编程控制。 unity3d的组件方式也是用这种元素+组合的方式，但它是把一切都抽象成object, 提供各种组件，你需要什么功能在object上添加组件就好，例如添加个label组件就变成文本控件。 第二层境界扩展控件方式 第三层境界编写控件方式 读者再来看个html、css、jq制作的一个简洁的音乐播放器的例子http://www.jianshu.com/p/29cd724580fc 你会发现用html和css代码很少，却很容易做出简单酷炫的界面，同时css的代码可以被复用。 界面开发是个很广大领域，有很多相关的概念没有涉及到，笔者写这篇文章也算是对过往开发的一个经验总结吧。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[由if-else,switch代替方案引起的思考]]></title>
      <url>http://thinkingroom.me/2016/10/25/%E7%94%B1if-else-switch%E4%BB%A3%E6%9B%BF%E6%96%B9%E6%A1%88%E5%BC%95%E8%B5%B7%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="text"><![CDATA[关键词：条件判断，多态，策略模式，哈希表，字典map 笔者在用python实现事件驱动后，发现python是没有提供switch语句，python官方推荐多用字典来代替switch来实现，这让我就觉得有点奇怪了。我们在编写多分支结构的程序，一般编程语言都有提供会选择if-else或者switch-case语句。条件少的时候还可以，当分支结构过分长，就会导致代码不美观且不容易维护。在笔者的从业工作经验中，多次看到项目在网络消息处理和gui层消息处理代码中，有超过20多条的if-else，switch-case语句，导致函数代码非常长。 例如下面这段类似windows消息处理的伪代码123456789101112131415161718192021222324252627282930313233343536373839404142void WndProc(hWnd, message, wParam, lParam) &#123; switch (message) &#123; case WM_CREATE: &#123; button1 = CreateWindow("button"); &#125; break; case WM_COMMAND: switch (cmdID) &#123; case btn1: MessageBox("XXXX"); break; case btn2: MessageBox("XXXX"); break; case IDM_TEST: MessageBox("XXXX"); break; case IDM_ABOUT: DialogBox("XXXX"); break; case IDM_EXIT: DestroyWindow(hWnd); break; default: return; &#125; break; case WM_PAINT: dosomething(); break; case WM_DESTROY: PostQuitMessage(0); break; default: return; &#125; return 0; &#125; 如果有100个消息ID，那就要写100个case的处理（经验不足的新手有时候甚至少写break关键字），整个WndProc函数就非常的长了。 而用python的字典实现的话，把消息处理函数映射到消息ID，伪代码如下1234567891011messages = &#123;&#125;#绑定消息处理函数和消息IDmessages[WM_CREATE] = fun1;messages[WM_PAINT] = fun2;...def WndProc(self,message): if message.type in messages.keys(): listener = messages[message.type] listener(message) 读者可以看到，整个WndProc就变成几行代码，消息处理函数的定义和绑定可以在其它地方实现，不需要全部都堆在一块，使得分支判断逻辑和细节处理函数分离了，而且提高了代码可读性和扩展性。高内聚，低耦合，这是编程开发中很重要的一种思想，上面例子说明了如何解耦分支逻辑和处理函数。 在笔者也曾在一个开源UI编辑器的源码中看过在gui层，解析ui配置文件生成界面的实现上也有类似的实现。 在《重构》一书中,专门有一章是内容讲解“简化条件表达式”，里面就有讲到利用多态取代条件表达式。而多态应用场景正是当对象要根据不同的状态表现不同的行为时使用的。java经常讲很多设计模式中都有用到多态的特性，以前看java项目代码发现很少有用到很多if-else和switch-case的代码段，反而经常看到很多用多态实现的类，通过继承抽象类，重写抽象方法的方式，来避免使用了条件语句。 突然想起C++的多态实现，虚函数表，存的是虚函数的指针，也就是虚函数的地址，也是通过数组或哈希表来存储（数组其实也是一种哈希表）。冥冥之中好像它们之间有着某种联系。 读到这里，你会发现字典（哈希表）map是很神奇一种数据结构，再多考虑一步：1.map的value中保存的不再是基本数据类型，而是对象。这样一来，通过不同的key可以拿到不同的对象，如果这些对象的类都实现同一个接口，那么这就是一个加强版的策略模式，就是多态性的体现，传统的策略模式传入的是实现类的对象，而通过map加强，只需传入一个数字或字符串即可实现多态。2.map的value中保存的是函数，通过不同的key（消息类型）可以拿到不同的响应处理函数，则可以实现消息机制或事件驱动。 字典只是一种数据结构，但通过不同的变化，却可以用更简单的方式实现某些设计模式或面向对象的多态特性，以至于让笔者觉得如何锻炼抽象业务逻辑和解耦代码的能力，才是一种更简单自然的编程方式，没有一种固定的编程范式，学习某某设计模式反而固化了编程思维。 虽然if-else和switch很常见的关键字，但不知读者是否也能停下来思考一下。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[事件驱动的Python实现]]></title>
      <url>http://thinkingroom.me/2016/10/25/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%9A%84Python%E5%AE%9E%E7%8E%B0/</url>
      <content type="text"><![CDATA[EventManager事件管理类实现，大概就百来行代码左右。如果有不了事件驱动的工作原理的可以看前一篇《事件驱动的简明讲解》 EventManager事件管理类实现，大概就百来行代码左右。如果有不了事件驱动的工作原理的可以看前一篇《事件驱动的简明讲解》1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586# encoding: UTF-8# 系统模块from Queue import Queue, Emptyfrom threading import *########################################################################class EventManager: #---------------------------------------------------------------------- def __init__(self): """初始化事件管理器""" # 事件对象列表 self.__eventQueue = Queue() # 事件管理器开关 self.__active = False # 事件处理线程 self.__thread = Thread(target = self.__Run) # 这里的__handlers是一个字典，用来保存对应的事件的响应函数 # 其中每个键对应的值是一个列表，列表中保存了对该事件监听的响应函数，一对多 self.__handlers = &#123;&#125; #---------------------------------------------------------------------- def __Run(self): """引擎运行""" while self.__active == True: try: # 获取事件的阻塞时间设为1秒 event = self.__eventQueue.get(block = True, timeout = 1) self.__EventProcess(event) except Empty: pass #---------------------------------------------------------------------- def __EventProcess(self, event): """处理事件""" # 检查是否存在对该事件进行监听的处理函数 if event.type_ in self.__handlers: # 若存在，则按顺序将事件传递给处理函数执行 for handler in self.__handlers[event.type_]: handler(event) #---------------------------------------------------------------------- def Start(self): """启动""" # 将事件管理器设为启动 self.__active = True # 启动事件处理线程 self.__thread.start() #---------------------------------------------------------------------- def Stop(self): """停止""" # 将事件管理器设为停止 self.__active = False # 等待事件处理线程退出 self.__thread.join() #---------------------------------------------------------------------- def AddEventListener(self, type_, handler): """绑定事件和监听器处理函数""" # 尝试获取该事件类型对应的处理函数列表，若无则创建 try: handlerList = self.__handlers[type_] except KeyError: handlerList = [] self.__handlers[type_] = handlerList # 若要注册的处理器不在该事件的处理器列表中，则注册该事件 if handler not in handlerList: handlerList.append(handler) #---------------------------------------------------------------------- def RemoveEventListener(self, type_, handler): """移除监听器的处理函数""" #读者自己试着实现 #---------------------------------------------------------------------- def SendEvent(self, event): """发送事件，向事件队列中存入事件""" self.__eventQueue.put(event)########################################################################"""事件对象"""class Event: def __init__(self, type_=None): self.type_ = type_ # 事件类型 self.dict = &#123;&#125; # 字典用于保存具体的事件数据 测试代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#-------------------------------------------------------------------# encoding: UTF-8import sysfrom datetime import datetimefrom threading import *from EventManager import *#事件名称 新文章EVENT_ARTICAL = "Event_Artical"#事件源 公众号class PublicAccounts: def __init__(self,eventManager): self.__eventManager = eventManager def WriteNewArtical(self): #事件对象，写了新文章 event = Event(type_=EVENT_ARTICAL) event.dict["artical"] = u'如何写出更优雅的代码\n' #发送事件 self.__eventManager.SendEvent(event) print u'公众号发送新文章\n'#监听器 订阅者class Listener: def __init__(self,username): self.__username = username #监听器的处理函数 读文章 def ReadArtical(self,event): print(u'%s 收到新文章' % self.__username) print(u'正在阅读新文章内容：%s' % event.dict["artical"])"""测试函数"""#--------------------------------------------------------------------def test(): listner1 = Listener("thinkroom") #订阅者1 listner2 = Listener("steve")#订阅者2 eventManager = EventManager() #绑定事件和监听器响应函数(新文章) eventManager.AddEventListener(EVENT_ARTICAL, listner1.ReadArtical) eventManager.AddEventListener(EVENT_ARTICAL, listner2.ReadArtical) eventManager.Start() publicAcc = PublicAccounts(eventManager) timer = Timer(2, publicAcc.WriteNewArtical) timer.start() if __name__ == '__main__': test()]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[事件驱动的简明讲解]]></title>
      <url>http://thinkingroom.me/2016/10/25/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%9A%84%E7%AE%80%E6%98%8E%E8%AE%B2%E8%A7%A3/</url>
      <content type="text"><![CDATA[关键词：编程范式,事件驱动,回调函数,观察者模式 举个简单的例子：有些人喜欢的某个公众号，然后去关注这个公众号，哪天这个公众号发布了篇新的文章，没多久订阅者就会在微信里收到这个公众号推送的新消息，如果感兴趣就打开来阅读。 事件驱动模型可以理解为上面的例子，是设计模式中观察者模式的一种典型应用。除了订阅公众号外，如你关注某人的微博，关注某人的简书，当被关注者发了个新状态或者新文章，你会收到他们新的消息，这些都可以理解为事件驱动模型。 实际上，世间万物各种属性的变化，我们都可以抽象为事件，最直观的是图形界面应用里，如常见的点击、双击、拖动操作，又或者是游戏里的英雄升级了，怪物死亡了等等，都可以视为一个事件发生了。而发送事件的事物称为事件源，对这个事件感兴趣的事物为监听者，事件发生后监听者会收到这个消息，然后做相应的反应。 例如上面公众号例子可以翻译为，监听器（订阅者）监听了（关注了）事件源（公众号），当事件源的发送事件时（公众号发布文章），所有监听该事件的监听器（订阅者）都会接收到消息并作出响应（阅读文章）。 1.公众号为事件源2.订阅者为事件监听器3.订阅者关注公众号，相当于监听器监听了事件源4.公众号发布文章这个动作为发送事件5.订阅者收到事件后，做出阅读文章的响应动作 公众号例子按事件驱动可以理解成下图 所以事件驱动模式可以进一步抽象理解为由事件源，事件对象，以及事件监听器三元素构成，能完成监听器监听事件源、事件源发送事件，监听器收到事件后调用响应函数的动作。 事件驱动主要包含以下元素和操作函数：元素1.事件源2.事件监听器3.事件对象 操作函数4.监听动作5.发送事件6.调用监听器响应函数 了解清楚了事件驱动的工作原理后，读者可以试着用自己熟悉的编程语言实现，编程主要实现下面的内容，笔者后续给python实现： 用户根据实际业务逻辑定义事件源 EventSources监听器 Listeners 事件管理者 EventManager成员1.响应函数队列 Handlers2.事件对象 Event3.事件对象列表 EventQueue操作函数4.监听动作 AddEventListener5.发送事件 SendEvent6.调用响应函数 EventProcess 在实际的软件开发过程中，你会经常看到事件驱动的影子，几乎所有的GUI界面都采用事件驱动编程模型，很多服务器网络模型的消息处理也会采用，甚至复杂点的数据库业务处理也会用这种模型，因为这种模型解耦事件发送者和接收者之间的联系，事件可动态增加减少接收者，业务逻辑越复杂，越能体现它的优势。笔者后续文章会讲解这种模式的应用场景和它的优势。]]></content>
    </entry>

    
  
  
</search>
